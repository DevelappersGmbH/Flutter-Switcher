// Autogenerated from Pigeon (v4.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// The communication object, this object will be used in dart and in native code
/// encoding and decoding the data will be done automatically
class HistoryEntry {
  HistoryEntry({
    required this.state,
    required this.at,
    required this.source,
  });

  bool state;
  String at;
  String source;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['state'] = state;
    pigeonMap['at'] = at;
    pigeonMap['source'] = source;
    return pigeonMap;
  }

  static HistoryEntry decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HistoryEntry(
      state: pigeonMap['state']! as bool,
      at: pigeonMap['at']! as String,
      source: pigeonMap['source']! as String,
    );
  }
}

/// This interface will be used to send data from native to dart, in this case
/// the native code will send the current state of the switcher
abstract class FApi {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void currentState(bool state);
  static void setup(FApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FApi.currentState', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FApi.currentState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_state = (args[0] as bool?);
          assert(arg_state != null, 'Argument for dev.flutter.pigeon.FApi.currentState was null, expected non-null bool.');
          api.currentState(arg_state!);
          return;
        });
      }
    }
  }
}

class _HApiCodec extends StandardMessageCodec{
  const _HApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HistoryEntry) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return HistoryEntry.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

/// This interface will be used to send data from dart to native, in this case
/// the dart code will send a history entry to the native code to be added to
/// the history list
class HApi {
  /// Constructor for [HApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HApiCodec();

  Future<void> updateState(HistoryEntry arg_entry) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HApi.updateState', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_entry]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
