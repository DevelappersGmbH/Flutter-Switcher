// Autogenerated from Pigeon (v4.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "bridge.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface BHistoryEntry ()
+ (BHistoryEntry *)fromMap:(NSDictionary *)dict;
+ (nullable BHistoryEntry *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation BHistoryEntry
+ (instancetype)makeWithState:(NSNumber *)state
    at:(NSString *)at
    source:(NSString *)source {
  BHistoryEntry* pigeonResult = [[BHistoryEntry alloc] init];
  pigeonResult.state = state;
  pigeonResult.at = at;
  pigeonResult.source = source;
  return pigeonResult;
}
+ (BHistoryEntry *)fromMap:(NSDictionary *)dict {
  BHistoryEntry *pigeonResult = [[BHistoryEntry alloc] init];
  pigeonResult.state = GetNullableObject(dict, @"state");
  NSAssert(pigeonResult.state != nil, @"");
  pigeonResult.at = GetNullableObject(dict, @"at");
  NSAssert(pigeonResult.at != nil, @"");
  pigeonResult.source = GetNullableObject(dict, @"source");
  NSAssert(pigeonResult.source != nil, @"");
  return pigeonResult;
}
+ (nullable BHistoryEntry *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [BHistoryEntry fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"state" : (self.state ?: [NSNull null]),
    @"at" : (self.at ?: [NSNull null]),
    @"source" : (self.source ?: [NSNull null]),
  };
}
@end

NSObject<FlutterMessageCodec> *BFApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BFApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BFApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)currentStateState:(NSNumber *)arg_state completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FApi.currentState"
      binaryMessenger:self.binaryMessenger
      codec:BFApiGetCodec()      ];  [channel sendMessage:@[arg_state ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface BHApiCodecReader : FlutterStandardReader
@end
@implementation BHApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [BHistoryEntry fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface BHApiCodecWriter : FlutterStandardWriter
@end
@implementation BHApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[BHistoryEntry class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface BHApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BHApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BHApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BHApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *BHApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    BHApiCodecReaderWriter *readerWriter = [[BHApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void BHApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BHApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HApi.updateState"
        binaryMessenger:binaryMessenger
        codec:BHApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateStateEntry:error:)], @"BHApi api (%@) doesn't respond to @selector(updateStateEntry:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        BHistoryEntry *arg_entry = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateStateEntry:arg_entry error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
